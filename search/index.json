[{"content":"Hugo 공식문서의 설치법 링크에 접속하면 공식 문서의 다양한 설치법이 기재되어 있습니다.\n하지만 패키지 관리자를 설치하는 과정, CLI를 이용하는 등의 과정이 번거로워 Windows환경에서 직접 설치하는 법을 기재합니다 Windows에서 패키지 관리자 없이 설치하는 법 링크에 접속하면 빌드 되어있는 휴고의 release를 확인할 수 있습니다. 해당 페이지에서 원하는 버전에 해당하는 Release를 찾습니다.\n본 게시글을 작성하는 시점의 최신버전 : v0.104.1\n본 게시글을 빌드한 버전 : v0.103.1 하단에 Assets 메뉴를 클릭하여 펼친 후 \u0026lsquo;Show all nn assets\u0026rsquo;를 클릭합니다.\n0.104.1버전의 경우 'Show all 23 assets' \u0026lsquo;hugo_extended_version_windows-amd64.zip\u0026rsquo;을 클릭하여 다운 받습니다. 다운받은 압축파일의 압축을 풀고 \u0026lsquo;hugo.exe\u0026rsquo; 파일을 경로(C:\\Hugo\\bin)에 넣습니다.\nHugo Document에서는 'C:\\Hugo\\bin'을 기본 경로로 설명하고 있기에 본 설명은 해당 경로에 설치합니다 링크를 참조하여 환경 변수 편집에 들어갑니다. 환경 변수에 C:\\Hugo\\bin경로를 추가하면 설치가 모두 완료되었습니다.\n본 글에서 설명한 경로가 아닌 다른 경로에 'hugo.exe'를 넣었다면 해당하는 경로를 입력해주세요 올바르게 설치되었는지 확인하는 법 명령프롬프트(CMD)를 실행해줍니다. hugo version 명령어를 실행한 뒤 아래와 같이 나타나는지 확인합니다. 아래의 사진이 잘 보이지 않는다면 우클릭 후 '새 탭에서 이미지 열기'로 연 뒤 보는것을 권장합니다 위의 사진 처럼 휴고의 버전이 나오지 않는다면 설치가 되지 않은 것이므로 처음부터 다시 해보는 것을 권장합니다. ","date":"2022-09-29T09:48:00Z","image":"https://blog.realsn.com/p/hugo-framework-%EC%84%A4%EC%B9%98/thumb_hu7a40aff17dad05f5d5a0240715286247_238394_120x120_fill_box_smart1_3.png","permalink":"https://blog.realsn.com/p/hugo-framework-%EC%84%A4%EC%B9%98/","title":"Hugo Framework 설치"},{"content":"\nHugo Framework를 선택한 이유에 대하여 간단하게 정리하여 작성하겠습니다.\n목차 Client Side와 Server Side에 대한 간략한 설명 Web Server와 Web Application Server에 대한 간략한 설명 그래서 왜 Hugo Framework를 선택하게 되었는지? 예시페이지를 JSP와 Hugo로 작성했을때의 샘플 코드 예시페이지의 실행 결과 Hugo Framework의 Directory 구조와 반자동 배포에 대하여 정의 Client Side는 클라이언트(사용자)환경에서 처리되는 것이라고 할 수 있습니다. HTML, CSS, JavaScript 등을 예로 들 수 있습니다. Server Side는 서버환경에서 처리하는 것이라고 할 수 있습니다. 대표적으로 JSP, ASP.Net, PHP 등 프로그래밍 언어로 만들어진 파일들을 예로 들 수 있습니다. 처리과정 Client Side는 사용자가 HTTP요청에 따라 파일을 전달받아 그 파일 내의 코드를 웹브라우저가 직접 해석하고 화면을 렌더링하여 사용자에게 보여줍니다. Server Side는 서버의 WAS에서 코드를 해석한 뒤 HTML 형식으로 빌드하여 사용자에게 넘겨주는 과정이 추가됩니다. 배포과정 Cleint Side는 정적페이지로 이루어져 있고 그 내용은 사용자의 웹브라우저가 해석이 가능하므로 단순한 Web Server만으로도 배포가 가능합니다. Server Side는 동적페이지로 이루어져 있고 사용자의 웹브라우저에서 단독으로 해석이 불가능하기 때문에 WAS를 이용한 배포만 가능합니다. 정의 Web Server는 사용자로부터 HTTP요청을 수신한 뒤 경로에 해당하는 정적 리소스를 반환합니다. 대표적으로 Apache Server, GitHub Pages 등이 있습니다. Web Apllication Server는 Web Server의 기능에 동적 리소스를 정적 리소스로 변환하여 사용자에게 반환할 수 있습니다. 대표적으로 Apache Tomcat, NginX 등이 있습니다. 목적 Web Server는 서버 측에 저장된 파일 중에서 HTML, CSS, JS, 이미지 등 상태가 변하지 않는 정적 리소스만을 사용자에게 반환할 수 있습니다. Web Apllication Server는 Server Side언어로 만들어진 동적 리소스들을 정적 리소스로 변환하여 전달할 수 있습니다. 처리 환경 Web Server는 정적 리소스만을 취급하기 때문에 로컬 환경에서 테스트를 진행할 때에는 굳이 Web Server를 동작시킬 필요 없이 웹브라우저에서 단독으로 테스트가 가능합니다. Web Apllication Server는 동적 리소스를 취급할 때에 있어서 필수적인 요소로 작용하기 때문에 동적 리소스를 취급함에 있어서 WAS는 필수적으로 동작되어야 합니다. Client Side로 이루어져 있습니다.\nHugo의 빌드 결과물은 정적 리소스로 이루어져 있어 WAS를 사용하지 않고 로컬 환경에서 손쉽게 테스트가 가능하며 Web Server만을 이용하여 간편하게 배포가 가능합니다. SASS 통합 컴파일, JavaScript 번들링을 지원합니다.\nHugo는 자체적으로 SASS 컴파일과 JavaScript 번들링하여 빌드할 수 있습니다. 기존에 SASS를 작성하여 컴파일하고, JavaScript를 번들링한 뒤 WAS를 통하여 리소스를 배포하였다면, Hugo를 사용할 때에는 설정만 해둔다면 Hugo명령어를 통하여 한 번에 처리가 가능합니다. 정적 리소스임에도 불구하고 Layout을 구성해두면 지속적으로 재사용이 가능합니다.\nHugo는 header, footer등 미리 만들어둔 파일을 partial을 통하여 불러와서 사용할 수 있습니다. 기존에는 include 기능을 사용하기 위하여 jsp를 이용하여 산출물을 만들었고 그렇기 때문에 WAS를 이용하여야만 했습니다. Git을 활용하면 형상관리와 배포를 동시에 처리할 수 있습니다.\nHugo는 Git을 이용한다면 아주 간편하게 공유 및 배포가 가능합니다. 기존에는 WAS를 통해서만 산출물을 배포할 수 있었지만 Hugo는 Git의 Submodule 기능을 활용한다면 소스코드와 산출물을 분리하여 관리, 배포할 수 있고 이 과정을 스크립트를 통해 '반 자동화'하여 편리하게 이용할 수 있습니다. 종합 - 기존 산출물을 테스트하기 위해서는 JDK, Apache Tomcat을 설치하여야 했고, Apache Tomcat을 실행시켜둬야함 SASS 컴파일, JavaScript 번들링 등의 과정을 별도로 거쳤어야함 종합 - Hugo 산출물을 로컬에서 테스트 할 때에는 Hugo가 설치된 상태로 hugo server명령어만 입력하면 실시간으로 테스트 가능 SASS 컴파일, JavaScript 번들링 또한 Hugo 빌드 시 자체적으로 처리(extended 버전 한정) JSP 샘플코드\n페이지 최상단에 jsp 선언을 합니다. html 구조를 작성합니다. 삽입되어질 페이지를 include 합니다. 각 페이지에 맞는 컨텐츠를 작성합니다. Hugo 샘플코드\nbaseof.html에 기본적인 html구조 및 partial을 작성합니다. single.html에 컨텐츠 영역을 설정합니다. index.html에 Front Matter(--- ---)를 작성한 뒤 컨텐츠를 작성합니다. 차이점\nJSP의 경우에는 페이지가 늘어나면 각 페이지마다 상기 1~4번의 과정을 계속해서 거쳐야 합니다. Hugo의 경우에는 3번의 과정인 Front Matter를 작성하고 컨텐츠를 작성하면 1~2번에 작성한 내용이 자동으로 재사용 됩니다. 위 화면은 상기 샘플코드를 실행했을 때의 결과이며, 2개의 코드 모두 결과는 동일합니다.\nHugo Site의 폴더구조 및 반자동 배포\n좌측은 Hugo Framework을 이용하여 만든 Site의 기본적인 Directory Structure이며 링크에서 더 자세히 알아볼 수 있습니다.\n우측은 쉘 스크립트를 이용하여 커밋메시지만 입력하면 Hugo로 만들어진 사이트를 빌드하고 결과물과 소스코드를 각각 git에 push하는 반 자동화 배포 스크립트 입니다.\n","date":"2022-09-28T10:25:00Z","image":"https://blog.realsn.com/p/hugo-framework%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%98%EA%B2%8C-%EB%90%9C-%EC%9D%B4%EC%9C%A0/thumb_hu7a40aff17dad05f5d5a0240715286247_240140_120x120_fill_box_smart1_3.png","permalink":"https://blog.realsn.com/p/hugo-framework%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%98%EA%B2%8C-%EB%90%9C-%EC%9D%B4%EC%9C%A0/","title":"Hugo Framework를 선택하게 된 이유"}]